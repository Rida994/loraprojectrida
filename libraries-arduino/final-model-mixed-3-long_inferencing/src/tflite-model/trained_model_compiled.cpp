/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 16.11.2022 12:36:24

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 7664;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[23];
TfLiteEvalTensor tflEvalTensors[23];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[11];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,1300 } };
const TfArray<1, float> quant0_scale = { 1, { 0.049091227352619171, } };
const TfArray<1, int> quant0_zero = { 1, { 6 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4] = { 1, 1, 100, 13, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data2[4] = { 1, 100, 1, 32, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data3[4] = { 1, 1, 50, 32, };
const TfArray<1, int> tensor_dimension3 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data4[4] = { 1, 50, 1, 16, };
const TfArray<1, int> tensor_dimension4 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data5[2] = { -1, 400, };
const TfArray<1, int> tensor_dimension5 = { 1, { 2 } };
const ALIGN(16) int8_t tensor_data6[32*1*3*13] = { 
  /* [0][0][][] */ -23,-39,-97,54,0,-28,79,58,-46,-22,4,-65,43, -45,-74,-83,46,-17,21,77,-36,-58,68,-15,35,24, -27,-11,-18,11,-127,90,14,21,-7,-12,-55,2,-54, 
  /* [1][0][][] */ -16,-5,20,-23,-15,-19,0,-20,0,35,11,11,-12, -71,-14,30,-2,10,-17,-13,-11,-1,-13,3,4,20, -127,11,43,21,16,-9,-13,6,0,3,-8,13,0, 
  /* [2][0][][] */ 15,-74,-50,-82,21,17,-7,46,20,-78,-85,1,23, 36,-8,0,-28,-30,70,-28,24,52,-5,-40,-14,47, -127,-42,-29,-116,-66,35,-8,-53,3,2,-42,59,42, 
  /* [3][0][][] */ -116,-96,-57,-53,-11,-11,41,-68,71,34,-32,17,-39, -77,-15,-48,-41,24,85,-25,-78,-11,54,-26,30,-14, -2,108,-75,-117,1,22,-127,-69,-34,37,17,44,-30, 
  /* [4][0][][] */ -77,127,13,69,-56,-34,-21,10,-18,-11,-13,66,-53, -52,69,28,40,-99,-61,6,53,-38,-59,15,8,-2, -63,82,21,50,11,-16,22,5,34,-25,44,-4,16, 
  /* [5][0][][] */ 126,-103,48,70,-19,-60,-19,-41,-18,3,46,-5,-37, 39,-61,-41,-43,93,7,1,-29,-9,69,19,10,21, -127,-76,34,70,66,-16,-21,9,41,6,-22,-1,13, 
  /* [6][0][][] */ -79,-127,-65,53,60,9,-45,12,39,1,-27,-17,-36, 8,-18,-72,18,12,26,-27,40,-56,-55,-48,58,-1, -55,-4,-7,23,66,3,-18,27,-34,-3,-5,12,2, 
  /* [7][0][][] */ -118,-17,74,1,-127,2,71,-42,-47,-6,55,41,12, -31,59,-30,-19,-43,15,-16,-28,18,-9,36,-19,43, -11,34,-33,-63,85,49,-42,47,18,55,-57,-38,-20, 
  /* [8][0][][] */ -43,-14,-111,36,35,-51,46,64,-46,2,-127,2,-38, -32,-107,-45,118,-69,1,89,45,62,19,-37,80,-4, -73,-115,-7,60,-114,97,9,-13,1,-48,17,77,-28, 
  /* [9][0][][] */ -57,127,48,31,30,4,-41,33,-13,69,2,39,-5, -101,99,61,20,70,-61,-30,9,35,37,23,62,0, -35,97,21,82,76,-31,-10,-63,61,-50,-22,-12,46, 
  /* [10][0][][] */ -95,-48,-32,-15,30,2,5,-2,4,-16,2,-30,-11, -127,-46,-14,-25,13,9,0,-11,-13,-12,-10,13,12, -109,-34,-17,-6,-47,15,28,-6,-27,-2,31,0,-13, 
  /* [11][0][][] */ -90,62,-30,17,-51,-21,-42,50,-6,-36,33,25,-49, -30,20,109,52,-65,11,-56,26,-42,-49,27,32,-38, -6,48,127,0,-50,73,-83,75,-60,-69,50,38,-41, 
  /* [12][0][][] */ 15,-58,14,6,-55,20,15,3,-4,33,19,-10,-11, 3,-127,-4,-12,-120,20,29,29,23,19,-16,10,20, -57,-59,79,10,-74,-27,41,-27,9,30,4,-71,8, 
  /* [13][0][][] */ -104,12,-97,61,79,23,-13,-17,25,15,-5,-64,49, -23,79,-46,98,31,21,-46,-10,-11,-4,19,10,25, -6,127,-19,115,-9,83,-33,17,-26,6,30,31,-45, 
  /* [14][0][][] */ -15,-35,127,-14,-81,66,-102,19,-55,-9,-28,-9,28, -62,-22,29,40,-64,-31,-40,24,38,31,28,-28,47, -100,-10,81,80,-65,49,-7,-41,-11,-8,15,0,19, 
  /* [15][0][][] */ -127,-7,-15,-15,-20,-50,-6,18,13,47,16,11,-20, 5,-25,-56,9,1,47,36,0,-9,-16,15,-19,28, 81,71,-38,-60,-39,53,26,-20,-41,7,-64,-2,7, 
  /* [16][0][][] */ -127,13,1,1,22,13,-24,-7,-6,18,7,-13,8, -81,-45,21,-17,-14,-9,-2,-28,14,16,3,24,21, -91,-31,-41,27,-10,0,-10,-19,-17,-2,-10,-22,6, 
  /* [17][0][][] */ 46,-20,43,11,49,-13,-9,-10,25,-7,-2,-16,-13, -59,-33,26,16,5,-28,24,44,-1,19,18,17,-7, -125,-127,25,-24,18,-29,-27,-29,19,8,-7,-11,-13, 
  /* [18][0][][] */ -112,7,127,25,-1,-20,23,-32,10,8,16,7,-4, 22,26,-61,-43,22,-5,24,-26,4,-11,1,-23,11, 20,-20,-21,14,77,-2,-7,-21,28,-51,-25,1,-17, 
  /* [19][0][][] */ -102,45,34,-58,52,-1,-1,22,-28,-4,-22,-1,-3, -85,-40,32,-37,34,16,5,-10,-31,-40,-35,-25,15, -58,-99,28,48,-127,-23,33,-30,6,3,16,30,7, 
  /* [20][0][][] */ 96,-70,127,-16,22,-51,47,49,-22,58,-24,8,7, 39,-64,84,-64,79,1,-16,5,-30,12,31,-27,9, -5,-102,112,35,-3,34,-10,14,0,14,-10,-18,-60, 
  /* [21][0][][] */ -45,118,-78,13,-45,63,68,-1,-50,-127,69,68,-6, -65,20,-70,8,42,22,3,60,-55,-16,96,24,2, -117,24,3,66,-42,85,51,80,36,-61,53,3,-12, 
  /* [22][0][][] */ -127,50,6,35,-83,16,11,-5,-12,19,-35,5,14, -46,-22,58,15,-22,1,6,7,11,-1,18,26,34, -101,25,-12,33,-53,-61,50,27,-34,7,6,34,23, 
  /* [23][0][][] */ 4,-13,43,24,17,-30,-17,-23,16,-28,11,-13,-18, 5,-72,37,6,-32,-30,-22,-26,8,-35,34,4,15, -26,-127,35,21,10,-39,15,34,-9,5,14,13,-3, 
  /* [24][0][][] */ 104,-24,54,18,-71,-14,87,43,80,-27,7,-14,-12, 100,-65,48,60,-72,35,71,-36,45,-46,6,-30,19, 24,-90,127,7,-63,-16,-6,-15,10,-37,43,34,34, 
  /* [25][0][][] */ -23,-68,23,-27,-12,22,-6,-10,-28,-10,-28,-20,20, -57,-16,46,-53,11,19,-21,30,-47,20,9,14,30, -127,13,64,-14,30,-12,2,5,-42,8,0,-25,-26, 
  /* [26][0][][] */ 90,97,-127,-28,9,77,-20,21,10,-15,3,8,-7, -36,92,-42,-76,70,-24,-5,13,-18,12,-26,-17,-3, -103,-50,16,3,47,4,-33,-36,-2,27,-9,-35,-17, 
  /* [27][0][][] */ 64,-5,-54,-80,65,36,-7,8,56,55,-61,-45,14, -12,-33,-28,42,42,56,74,-39,-53,-3,22,-33,-35, -32,-127,33,58,99,1,79,3,8,23,42,-36,-43, 
  /* [28][0][][] */ -127,100,98,-23,7,-97,110,-29,55,-9,-8,-39,-18, -98,28,37,-23,32,-7,38,-25,17,-32,37,23,-61, 60,64,7,-71,89,-4,43,-47,72,5,-31,-6,-40, 
  /* [29][0][][] */ 19,-96,-30,63,-36,-6,20,-8,-127,43,45,-60,-4, -31,-34,-12,52,29,-9,-25,29,10,-12,0,-67,-56, -38,1,-87,21,44,-45,8,87,-51,-49,99,-21,-24, 
  /* [30][0][][] */ -127,-25,51,-6,4,17,-12,28,11,24,30,-3,-21, -17,23,47,-42,-70,51,-6,4,-18,22,14,13,8, -2,23,14,-4,-32,58,21,22,0,32,4,-30,13, 
  /* [31][0][][] */ 127,53,-64,-80,38,15,-71,-18,-13,31,-15,9,-5, -7,7,22,7,12,-3,31,11,-17,44,19,-3,-14, -104,-27,71,-16,26,-31,-4,23,41,4,-9,-8,11, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 32,1,3,13 } };
const TfArray<32, float> quant6_scale = { 32, { 0.0079100020229816437, 0.017975794151425362, 0.0068459250032901764, 0.0067291143350303173, 0.0065966271795332432, 0.0065665603615343571, 0.0079010697081685066, 0.0090566333383321762, 0.0063310172408819199, 0.007235067430883646, 0.0148732028901577, 0.0063677104189991951, 0.0080754077062010765, 0.007337142713367939, 0.0077291792258620262, 0.0076538426801562309, 0.015351496636867523, 0.011084161698818207, 0.0078243343159556389, 0.011003637686371803, 0.0088334586471319199, 0.0053305826149880886, 0.01120755635201931, 0.012314951047301292, 0.0069819018244743347, 0.013850446790456772, 0.0071362708695232868, 0.0081017492339015007, 0.0071574258618056774, 0.0075674084946513176, 0.012440160848200321, 0.0093550188466906548, } };
const TfArray<32, int> quant6_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int32_t tensor_data7[32] = { -4450, -1331, -5153, -4571, -4728, -4820, -3980, -4531, -4549, -2966, -592, -4264, -1882, -4301, -2524, -3547, -937, 506, -4331, -739, -2079, -5120, 271, -795, -2863, -2189, -3771, -2596, -3940, -4440, -1843, -3526, };
const TfArray<1, int> tensor_dimension7 = { 1, { 32 } };
const TfArray<32, float> quant7_scale = { 32, { 0.00038831171696074307, 0.00088245380902662873, 0.00033607485238462687, 0.00033034049556590617, 0.0003238365170545876, 0.00032236051629297435, 0.00038787320954725146, 0.00044460123172029853, 0.00031079741893336177, 0.00035517834476195276, 0.00073014380177482963, 0.00031259871320798993, 0.00039643168565817177, 0.0003601893549785018, 0.00037943490315228701, 0.00037573653389699757, 0.00075362378265708685, 0.00054413510952144861, 0.00038410618435591459, 0.0005401820526458323, 0.00043364532757550478, 0.00026168485055677593, 0.00055019272258505225, 0.0006045560585334897, 0.00034275013604201376, 0.0006799354450777173, 0.00035032830783165991, 0.00039772482705302536, 0.00035136681981384754, 0.00037149337003938854, 0.00061070278752595186, 0.00045924936421215534, } };
const TfArray<32, int> quant7_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int8_t tensor_data8[16*1*3*32] = { 
  /* [0][0][][] */ -70,-52,-115,-23,-28,-88,-52,-67,18,-90,-48,-20,-94,-37,5,-84,8,-99,8,-8,-31,47,-38,-62,-18,-34,-89,-76,-54,-43,-108,-35, -44,-21,12,-51,-63,-91,-27,-52,-19,-74,-63,-16,-26,-35,-66,-40,-16,-24,-76,22,-36,-127,-15,-38,26,-10,-55,-69,-41,-56,-92,-100, -55,-107,-111,-22,-92,-19,6,20,-49,-40,27,-20,-103,-97,-81,-47,-31,-64,-56,-11,-89,-26,-51,-41,20,-58,47,-126,-18,-89,-83,-49, 
  /* [1][0][][] */ -41,-10,-27,-56,-24,-82,-74,29,-74,-55,-53,34,-2,-20,26,0,-45,-26,-41,-71,-38,5,10,-72,-45,-20,-91,-61,-61,-32,82,-76, -2,-18,28,14,-37,-85,8,4,-28,1,-3,-47,-45,-8,-61,46,-5,-53,-1,-33,-124,81,-51,-85,-7,-42,-41,-30,-127,-66,-47,3, -48,-60,-36,-53,8,-68,27,-62,-42,-48,-33,29,6,80,-23,23,26,-41,-47,-70,14,-21,-5,-16,-35,-18,-36,39,-73,19,-64,2, 
  /* [2][0][][] */ -9,-35,-56,-67,8,-32,-46,-47,11,16,-101,43,2,27,-22,-32,-91,-42,-16,-36,-50,14,35,-49,-21,-21,-16,1,15,30,-13,-44, -21,-63,-32,-45,3,-75,-24,-5,-17,-2,-68,4,-30,11,-4,10,-84,-50,5,-41,-76,-1,-4,-70,-66,-6,17,-4,32,-9,5,-18, 14,-85,0,-1,3,-4,38,-20,9,15,-85,7,-16,33,-52,14,-74,-120,48,-32,-127,27,-16,-70,-33,-59,-3,73,27,24,9,-31, 
  /* [3][0][][] */ -15,13,-98,20,-15,26,-16,70,-82,12,-12,-8,-14,-21,22,20,24,14,54,-18,-72,15,9,-6,-40,-45,24,-3,30,-91,40,17, -101,-38,-37,23,-32,36,65,6,-110,-50,-63,-14,-91,-10,-45,47,-18,-66,48,-81,-100,-8,-57,-88,-124,-124,2,-17,-26,-85,-3,-25, -127,-35,6,-28,-15,-45,-34,-13,-81,-37,-32,-3,-62,-108,-80,5,-46,-9,-18,59,-5,-33,-64,-45,-92,-15,18,17,23,-88,30,26, 
  /* [4][0][][] */ -49,-34,18,7,-11,-2,19,-25,-42,1,-79,-30,-21,24,-53,14,-16,-63,9,-61,-82,19,-54,-49,-84,-77,30,32,-33,34,-48,-3, -68,34,28,-19,-6,-8,2,-19,-45,1,-107,6,-79,-13,-28,3,-18,-20,-8,-45,-38,16,-21,38,-107,-78,-2,19,-24,6,-36,18, -26,24,11,60,12,6,-2,-20,-83,13,-32,12,-75,5,-22,10,5,13,11,1,-49,-8,4,-39,-127,-26,16,-37,4,-13,21,41, 
  /* [5][0][][] */ -16,-107,20,-6,-21,1,45,40,15,-16,-36,-29,-101,2,-72,16,-39,-74,12,-85,-111,0,-75,-127,-80,-92,-1,-15,-19,1,8,11, -45,-18,-14,-56,-10,-65,-46,-13,-56,-20,-40,-54,-28,-55,-51,-43,-14,0,-7,28,-37,32,-13,-30,-37,-74,30,29,-9,-38,-34,34, -19,-11,12,-21,-5,2,26,5,35,-62,28,-37,9,-65,2,-36,18,29,-37,48,22,-16,11,43,-22,-35,0,21,-46,18,-5,-5, 
  /* [6][0][][] */ 20,-15,29,15,-127,41,32,-67,23,-94,13,-50,18,8,-83,-58,-6,18,12,-14,20,-73,-27,35,19,13,-63,24,-59,24,-90,-21, -4,43,9,-2,-13,2,35,-1,-2,-5,27,-63,-39,6,-88,2,9,3,7,-12,34,0,-20,-30,-21,42,-36,-19,-9,19,-27,-9, 0,-45,-7,36,-16,-79,-39,66,-17,-4,-50,-25,-47,-6,-67,25,-52,-105,11,-116,-78,19,-25,-98,-39,-30,13,-59,48,1,-30,6, 
  /* [7][0][][] */ -62,-3,-47,-68,-42,-23,-30,-5,-20,7,-91,27,-31,-44,26,-48,-59,-18,10,16,13,-71,-54,16,-1,32,-47,-69,42,-8,-8,1, -58,-15,7,-64,-25,11,-47,-52,-5,-25,-26,24,-16,-10,13,-80,-43,-3,-16,-19,-20,-63,-36,-5,19,6,-27,-31,2,9,-2,9, -21,9,-18,-47,-84,26,11,-7,-8,-43,-5,4,16,-21,4,-97,-12,8,-2,4,19,-127,-29,16,-17,-10,-20,24,-7,-19,-16,22, 
  /* [8][0][][] */ -32,-38,-8,-56,-8,33,-32,-19,-27,-15,-48,34,-30,-23,-51,-3,-8,-70,-11,-80,-38,-71,2,-32,-11,-101,-56,-43,-28,-28,-41,-31, -13,3,-31,-27,-9,-14,-25,-21,-58,7,-67,-14,-62,-9,4,-18,-25,-18,-21,18,-66,16,-66,-22,-58,-6,28,-45,-97,-58,-33,1, -38,-39,-74,-11,-78,-30,-50,-21,-3,-25,-41,-69,-69,-46,-33,-20,-3,-19,-46,-16,-43,-80,-51,0,-4,-17,-59,-42,-62,-127,-23,-66, 
  /* [9][0][][] */ -20,-59,22,-39,56,12,-4,-67,0,12,-67,-23,4,29,-20,1,-92,2,19,-7,4,23,0,-1,12,-24,-127,2,10,1,-57,-59, -39,-25,9,26,-17,17,-6,19,-28,-2,-55,17,-7,-47,-35,-3,-108,25,-1,-15,-14,-39,7,17,16,9,-99,-18,6,5,-20,-19, -48,6,8,25,-18,1,13,-28,16,-60,14,-26,20,-82,-14,-54,-3,16,22,-9,41,-52,-59,4,8,23,-41,32,-7,7,-26,27, 
  /* [10][0][][] */ -58,-34,21,-5,2,-28,5,-30,-5,-52,1,30,11,-66,3,-47,34,-5,-73,10,53,-2,-4,2,0,7,-56,-94,-20,-40,28,2, 11,-96,14,-39,-25,8,-39,-20,-8,-79,-84,13,15,-80,9,-16,-127,-55,-66,34,-10,-57,-13,1,20,-31,-39,-67,-50,-51,27,-78, 4,-84,10,-21,23,3,-13,-11,16,14,-33,-39,22,-27,-6,0,-70,-59,9,-48,-34,6,-10,-25,10,-101,-44,17,-20,23,3,-74, 
  /* [11][0][][] */ -34,-5,34,1,-103,29,38,-43,0,-88,7,-30,-3,31,-51,7,5,-2,9,-14,4,3,-75,1,-33,-44,1,32,-49,12,-114,-17, -49,-37,29,-35,-75,-4,5,-47,-4,-127,-47,-100,-75,-22,-52,17,-44,-21,-28,-60,22,9,-91,-5,-46,-12,-8,29,-91,8,-102,68, -75,-56,74,78,-27,-1,-1,-16,-25,-49,-73,-99,-103,-36,-119,16,-26,-82,-5,-91,-46,12,-73,-62,-106,-28,6,-48,-7,46,-55,-20, 
  /* [12][0][][] */ -2,-95,-74,-45,-35,-6,19,-95,32,-46,-8,-16,2,24,-59,10,-21,-28,-62,-59,-7,0,10,-9,9,16,-72,33,-119,70,-32,-76, -17,-25,-56,-45,0,8,7,-30,16,-42,-36,-29,-9,6,-119,-26,-25,-66,5,-60,-9,7,51,-22,-69,-51,-23,-10,-29,-1,-51,-48, -66,-28,23,24,4,-3,60,-22,9,11,-4,18,-83,-14,-58,-17,-72,-74,-8,0,-127,36,-5,-87,-68,1,15,-3,-65,16,-44,41, 
  /* [13][0][][] */ 27,2,-50,50,-74,-52,-64,-42,-5,-7,-74,-44,-52,-54,-54,-70,-28,-104,-55,-33,-6,1,-20,14,-31,-17,-29,-29,16,-27,37,-18, -35,11,0,-70,-41,5,-51,-56,-46,6,-29,-66,-74,-79,19,-103,-12,-35,-11,-40,-32,-65,-60,-1,-53,-81,3,-19,-4,-36,22,-58, -43,-16,-24,-106,-12,-1,-46,-42,-32,-68,-57,-33,-15,-65,-14,-10,-28,-46,-85,3,-9,-101,-127,-20,-33,-39,-102,-51,-50,-29,-41,-89, 
  /* [14][0][][] */ -18,-39,-31,1,-72,0,-87,-76,-34,-11,-84,-64,31,-9,-51,-72,-64,28,-3,-80,-34,2,-34,-13,-53,-19,29,-114,-80,-66,-8,-34, -85,14,10,-42,-32,-43,-32,-11,-13,-19,-106,16,-67,-67,-41,-32,-31,-48,-85,-6,-60,-75,-65,0,-10,-2,-21,-4,-26,-66,-116,-1, -30,-24,12,-52,3,-35,-79,-73,-71,-4,2,-10,-31,-99,-79,-42,26,-85,-52,44,-64,-26,-75,-31,-13,-46,-42,-39,-61,-2,-72,-127, 
  /* [15][0][][] */ 0,-68,32,49,-37,-48,5,18,48,-22,-9,-99,-15,20,-61,10,-8,-19,21,-99,-6,41,-76,-23,17,23,25,45,-27,-52,-39,-13, 30,3,-19,25,9,-32,0,48,27,-41,-61,-24,6,-9,-13,23,-79,-37,15,-85,-33,26,-66,-24,6,55,-46,-23,-63,-37,-9,-53, 32,20,-42,-61,6,-54,-123,22,83,0,-53,25,26,66,34,-3,-9,-20,-66,-47,-10,-14,9,-59,-2,49,-91,-59,-6,-127,23,-23, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 16,1,3,32 } };
const TfArray<16, float> quant8_scale = { 16, { 0.0040299026295542717, 0.009709223173558712, 0.012449036352336407, 0.0095056258141994476, 0.013588061556220055, 0.011705391108989716, 0.0104876309633255, 0.013521419838070869, 0.0074430345557630062, 0.010432109236717224, 0.011273579671978951, 0.010320967994630337, 0.012077375315129757, 0.0080184591934084892, 0.0032076237257570028, 0.0095931338146328926, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int32_t tensor_data9[16] = { -987, -631, 425, -54, 422, -173, -635, 12, -894, -101, -177, 199, -130, -594, -810, 2, };
const TfArray<1, int> tensor_dimension9 = { 1, { 16 } };
const TfArray<16, float> quant9_scale = { 16, { 0.00029198834090493619, 0.00070348597364500165, 0.00090200034901499748, 0.00068873428972437978, 0.00098452891688793898, 0.00084811920532956719, 0.0007598858792334795, 0.0009797003585845232, 0.00053928833222016692, 0.00075586303137242794, 0.00081683212192729115, 0.00074781023431569338, 0.0008750715060159564, 0.00058098096633329988, 0.0002324097731616348, 0.00069507467560470104, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int8_t tensor_data10[6*400] = { 
  -4, -12, -17, -20, -29, 2, -16, 0, -10, 1, 16, -60, -31, 9, 6, -3, 0, -4, -28, -37, -50, -4, -29, 5, -7, 7, 30, -71, -20, -21, -5, -11, -2, -9, -48, 20, -38, -3, -26, -8, 3, 5, 20, -57, -50, -3, 6, 18, -7, 7, -41, 15, 7, -21, -18, -7, -10, -6, 22, -29, -57, -8, 3, -4, -1, -2, -37, 12, -6, -16, -6, -10, -12, -2, 16, -5, -80, -11, 4, 21, -18, -32, -40, 17, -1, 10, -6, -7, -11, -24, 22, -2, -55, -22, 5, -4, -16, 9, -36, 17, -7, -4, 2, -21, -9, -27, 20, 21, -52, -1, 0, -4, -6, -19, -20, 11, 2, 6, -12, -13, -21, -12, 27, 5, -41, 9, -8, -10, 4, -11, 3, 16, 10, 5, -5, 5, 8, -24, 7, 14, -47, -24, -2, 12, 7, -20, -9, 23, 10, 16, -12, -7, 0, -1, 9, 9, -18, -9, 3, 0, -20, -25, -15, 17, 5, 8, -16, -5, -18, -9, 10, 8, -41, 10, 2, 1, 7, -10, -9, 14, 0, 11, -11, 5, 3, -18, 14, 8, -25, 5, 3, -11, -6, 11, -12, 30, 11, 10, -24, 2, -8, -6, 11, 18, -24, 9, 0, -4, 5, -7, -10, 18, 22, 0, -16, 18, -2, 10, 13, 17, -21, 14, 9, -15, 12, -8, -5, 12, 22, 3, -11, 14, -10, 13, 1, 14, -40, 20, 6, -20, -15, -27, 3, 16, 23, 1, -17, 16, -11, 11, -2, 3, -17, 19, 1, -9, 4, -15, -7, 6, 25, -8, -20, 29, 12, 17, -1, 24, -9, 3, -2, -17, 2, 8, -10, 14, 22, 5, -24, 16, -2, 12, 13, -5, -20, 2, 3, -20, -17, -22, 0, -2, 21, 1, -45, 17, -2, 13, 24, -30, -48, 6, 5, -25, 1, 10, -25, 14, 11, 5, -13, 21, 2, 21, 15, -2, -45, 25, 8, -26, -6, -14, -27, 14, 26, 2, -7, 31, -7, 21, 21, -26, -37, -4, -2, -27, -1, -23, -18, 13, -26, 3, -25, 30, 6, 13, 15, -35, -52, 1, -5, -15, -7, -1, -16, -31, -28, -9, -30, 16, -10, 10, 1, -5, -13, -1, -7, -43, 5, -20, -27, -6, -40, -23, -40, 15, -10, 23, 26, -30, -4, 7, 2, -14, -5, -9, 7, -31, -84, -12, 4, 15, -3, 13, 11, 0, -7, 8, 3, -7, 
  4, 3, 2, 19, 23, 1, 25, -10, -2, 7, 18, 31, 7, -9, 7, 6, 7, -25, 5, 9, 44, 2, 22, -7, 0, -15, -7, 33, 24, 8, 3, -22, 11, 6, -16, -26, 54, 6, 19, -12, 1, 2, -5, 41, 17, -19, 3, -30, 4, 22, -13, -12, 29, 4, 35, -11, -5, -18, -26, 46, 29, -9, 5, -15, 10, -15, -24, -14, 20, 16, 21, -22, -6, -11, -33, 27, 20, -24, 3, -14, -6, -32, -13, -30, 18, -8, 18, -27, 0, -1, -39, 32, 21, 4, -1, -13, 9, -41, -33, 15, 11, 1, 11, -11, -6, -8, -25, 27, 21, 2, -5, -2, 11, 1, -9, 0, 18, 3, 3, -8, -1, -3, -17, 24, 37, -1, 1, -4, 6, -12, -16, -6, 14, 7, 14, -10, -27, 3, -2, 28, 29, 15, 1, -10, 7, -21, -23, -36, 5, -8, 1, -2, 5, 4, -4, 25, 12, 13, -5, -22, 20, -14, -10, -31, 18, -8, 12, -20, -11, 3, -22, 28, 18, 5, 2, -3, 3, -31, -4, -14, 5, -12, -4, -16, 14, -20, -11, 18, 5, 8, -2, 0, -2, 1, -10, -32, 11, -1, -7, -5, 0, 2, 11, 17, 13, 11, -7, -16, 0, 3, -6, -35, -3, 6, 7, -29, -2, -23, 6, 3, 4, 11, -8, 3, -6, -5, 8, -32, 8, -16, 3, -3, 3, -22, 24, 13, 23, -14, -4, 8, 11, -1, -5, -42, 13, -3, -3, -21, -24, -11, 29, 21, 7, 1, 2, -11, -12, 3, 10, -32, 22, -3, -14, -23, -7, -21, 25, 22, 27, 0, 8, -4, 1, -13, -4, -29, 19, -4, -16, -16, -19, -29, 24, 21, 31, -8, -6, -12, -7, 3, 16, -30, 13, -23, -3, 12, -10, -6, 32, 24, 31, 3, 1, -2, 1, -7, 11, -33, 23, -8, -8, -10, -12, -15, 42, 32, 17, 6, 2, -10, 11, 26, 13, -44, 5, -6, 13, -17, -4, -32, 34, 15, 20, -9, 11, -6, 3, -6, -6, -53, 28, -1, 7, 10, -6, -15, 41, 36, 56, 13, -4, -5, -4, -1, 5, -16, 31, -5, 14, -3, -3, -25, 40, 14, 28, -6, 9, -1, 7, 7, 22, -17, 13, 0, 11, -16, -1, -14, 21, 18, 33, -7, -2, -8, -1, 5, -8, -37, 20, -5, 7, -15, 2, -3, 15, 16, 26, -53, 0, -23, 
  -3, 16, 30, 31, 12, -2, 12, 10, -5, -11, -18, 5, 23, -5, -3, -3, -5, -3, 12, 18, 4, 11, -1, -2, -18, -2, -16, 23, -13, -1, -5, 27, 4, 21, 22, 39, -15, 3, 18, 0, -2, -17, -20, 0, 1, 10, 0, 23, 2, -15, 8, 22, -7, 7, 15, -12, -5, -11, -16, 3, 14, -3, -2, 16, -3, 31, 17, 16, 0, 14, 9, -18, 5, 2, -5, 9, 18, -1, 0, 15, 7, 36, 8, 19, -7, 9, -4, -26, -1, -14, -26, -7, 9, -2, 2, 26, 7, -1, 19, 24, 18, 2, 2, -7, 0, 1, -21, 1, -21, -11, -2, -4, -7, 23, 12, 16, -7, 13, -2, -27, 5, -13, -16, -7, -11, -8, 3, 18, -6, -5, 7, 23, -18, 31, -2, -10, 6, -22, -18, -19, 12, 12, 5, 7, 5, 4, 2, 15, -13, 14, -14, -26, -10, -14, -8, -3, 22, -15, -5, -1, 5, -8, 11, 3, -19, 12, 4, -46, -21, -19, -4, -24, 25, -13, 2, -3, -1, -2, 0, -1, -8, 18, -2, -32, -11, -19, -14, -17, 19, 1, 5, -11, 4, 17, 16, -4, 2, 27, 10, -31, 5, -6, -26, 4, 0, 6, 4, -12, -13, -4, 3, 7, 0, 17, 8, -39, -10, -16, -34, -13, 7, -4, 3, -19, 2, -26, 11, 18, -3, 30, 6, -47, -11, -25, -23, -7, 15, -8, -2, -33, -1, 12, 21, 15, -11, 26, 8, -37, -6, -18, -13, -16, 10, -15, -3, -41, 2, 15, 1, 21, -13, 26, 18, -21, 4, -34, -27, -15, -2, -29, 3, -13, 4, 5, 3, 13, -6, 30, 20, 0, -17, -16, -43, -8, -1, 14, -6, -10, 9, 16, -19, 17, -6, 31, 5, 17, -10, -35, -58, -2, 23, -20, -2, -12, 3, -27, -9, 25, -4, 32, 11, -7, 10, -34, -33, 0, 10, -20, -9, -25, 2, 13, -21, 27, -13, 31, -10, 18, 0, -37, -41, 14, 31, 30, -2, -31, 0, -11, -11, 22, -2, 29, 18, -1, 3, -8, -16, 11, -14, 11, -3, -28, 8, -3, 0, 47, 18, 43, 8, -2, -1, -26, -16, 18, 13, 5, -4, -22, -3, 15, -13, 51, 20, 41, 19, -1, 5, -29, -18, 24, -29, -5, 2, -42, -5, 16, -22, 51, 20, 36, -14, 10, -7, -48, -12, 17, -21, 39, 3, -10, 
  -6, 1, -11, -14, 4, 12, 18, -5, 16, 27, 5, 18, 0, 14, 4, 9, 9, 16, 2, 39, 21, 17, 10, -11, -1, 15, 1, 8, -2, -2, -6, 1, 6, 11, 24, -7, 20, 24, 17, 15, 9, 49, 31, 23, 7, 14, 5, -1, 4, 24, 15, -9, 14, 27, 14, 14, -19, 39, 25, 35, 5, 3, 4, 17, 4, 15, 5, -6, -7, 30, 18, 8, 8, 27, 5, 27, 24, 4, -4, 14, 8, -9, -5, -10, -2, 16, 32, 18, -14, 30, 12, 16, 20, 1, -2, 15, 0, 40, 6, 5, -9, 6, 11, 6, 4, 27, 25, 38, 23, -4, -5, 0, -2, 24, 1, -24, -3, -1, -1, 15, 17, 11, 20, 24, 29, -1, 2, 8, 3, 0, 7, -11, -11, 10, 13, 6, 5, 18, 13, 24, -8, -16, -2, -6, -1, -4, 0, -21, 0, 20, 7, 7, 11, 26, 11, 20, 11, -14, 4, -3, -2, 1, 3, 4, 10, -3, 6, 7, 9, 16, 21, 10, 0, -6, -4, 7, 9, 12, 10, 2, -1, 17, -3, 1, 10, 34, 18, 22, 8, -12, 9, 11, 3, -3, -77, -36, 6, 25, -8, 13, 4, 29, -22, -29, -18, -2, 6, -11, 0, 4, -76, -79, -78, -79, -18, -84, 2, -94, -80, -65, -20, -4, 11, -92, 8, -18, -76, -60, -79, -40, -35, -86, -6, -113, -89, -50, -35, -4, -4, -107, -2, 5, -73, -31, -77, -61, -63, -92, 8, -100, -99, -49, -23, -12, 2, -104, -2, 14, -47, -46, -78, -31, -74, -97, -5, -115, -78, -57, -36, -17, -10, -126, 0, 16, -38, -33, -59, -44, -66, -78, 7, -84, -83, -39, -13, -10, 3, -110, -5, 16, -35, -22, -87, -55, -59, -76, 7, -90, -54, -55, -42, -2, 1, -86, -6, 1, -53, -50, -103, -76, -63, -81, 3, -64, -57, -47, -11, 2, -4, -60, -8, 24, -67, -34, -73, -57, -40, -80, -3, -77, -72, -50, -19, -4, -3, -75, -4, 23, -31, -22, -31, -46, -53, -45, 1, -81, -38, -51, -33, 0, -7, -65, -2, -3, -38, -18, -52, -19, -32, -55, 3, -63, -69, -38, -14, -7, 0, -67, -8, -3, -30, -4, -29, -7, -45, -51, 5, -44, -35, -38, -13, 4, -9, -38, -11, 20, -25, -5, -16, -24, -127, -69, 11, -61, -63, -63, -6, 23, -10, -76, 
  -4, 3, 8, -30, -44, -7, -21, 21, 1, 19, 16, -13, -24, -7, -6, -7, 4, -3, 8, -4, -57, -3, -31, 17, -3, 14, -4, -32, -4, 3, 1, -11, 5, -25, -8, -14, -54, -30, -7, 12, -1, 6, 7, -41, -34, 12, 3, 5, 4, -30, -5, -30, -96, 0, -33, 18, 10, 0, 11, -57, -37, 1, -4, 9, 2, -24, 17, 3, -34, -35, -22, 19, -12, -8, 9, -48, 13, 30, -3, -31, 6, -2, 4, 5, -1, -18, -5, 39, -15, 5, 14, -36, 15, 15, -3, -20, 9, -18, 14, -18, -1, 0, -21, 20, -11, 7, -5, -49, 11, 12, 7, -3, 1, 10, 11, -13, -5, -8, -26, 24, -8, 6, 9, -45, 18, 15, 9, -4, 4, 44, 8, -13, 14, -30, -6, 13, 12, 3, 4, -35, 4, 7, 4, -10, -1, 32, 17, -13, -8, -25, -11, 11, -16, -13, 11, -25, 3, -7, -4, 2, 3, 37, 6, -6, 2, -31, -34, 9, 21, -9, -7, -17, 10, -4, -2, 1, -17, 13, 18, -13, 11, -17, -12, 13, -22, -4, -7, -25, 3, -5, 8, 6, 8, 0, 18, -6, 4, -28, -11, 6, 7, -1, 1, -30, 4, -6, -5, 7, -3, 3, 22, 0, 8, -38, -12, 23, -10, 15, 7, -12, 4, 0, -8, 22, -10, 24, 26, -5, 9, -26, -19, 3, 10, 2, -3, -10, 8, 0, 4, 21, 13, -18, 24, -2, 2, -34, -2, 13, 9, 13, 5, -16, 9, 5, -8, 28, 1, -6, 31, -4, 16, -20, -13, -2, -10, 12, 8, -9, -6, 8, -1, 13, -6, 2, 26, 7, 15, -41, -34, 4, 19, 9, -3, -5, 2, 0, -6, 27, -8, 15, 33, 0, 1, -18, -11, -11, 11, 9, -1, -3, -27, 15, -6, 25, 0, 11, 22, -13, 9, -32, -32, 5, 9, 10, -12, -25, -7, 4, -7, 19, -7, -10, 35, 4, 12, -33, -14, -16, 6, 15, -10, -3, -36, -36, -2, 20, 9, 8, 40, -14, 8, -19, -37, -11, 17, 12, -26, -10, -6, -24, -2, 25, 5, 0, 32, -23, 13, -21, -36, -3, 5, 7, -4, -8, -18, -18, 0, 24, 4, -21, 19, -16, -12, -46, -49, -1, 9, 15, -4, -43, 30, -6, 7, 25, -1, -39, 25, -21, -32, -13, 8, 3, -18, 12, 6, -23, -13, -21, -7, 25, 
  -1, -2, -10, -34, 4, -6, -19, -36, 3, -35, -43, -29, 1, -2, 0, 2, -5, 12, 5, -8, -19, 6, 0, -24, 3, -27, -31, -10, -23, -4, 2, 15, 3, 4, 22, -23, -10, 1, -18, -15, 1, -15, -36, -13, 14, -11, -5, 4, -3, 12, 33, 3, 5, -24, -9, -1, 15, -4, -16, -46, 3, 10, 0, -8, -10, -14, 17, -10, 2, 4, -13, 1, -1, 8, -19, -30, -20, -7, 0, 1, 3, 19, 18, -26, -24, -6, -3, -12, 28, -3, -10, -46, -17, -7, -1, 0, -3, -11, 7, -33, -45, 2, 0, 1, 12, 6, 2, -47, 12, -6, -1, 12, -7, 1, -1, 4, -38, 6, 23, -10, 11, 6, -6, -41, -20, -12, -6, 1, 0, -12, -8, -12, -18, -1, -2, -11, -5, 9, -11, -26, -34, 15, 0, 0, -11, -12, -4, -19, -33, -18, 21, 5, 10, 9, -7, -39, -19, 5, -2, 20, 5, -3, -16, -12, -32, 9, 20, 10, 6, 15, 7, -3, -34, 7, -7, 11, 0, 2, -11, -1, -49, 6, 8, 3, 14, 16, -1, -18, -40, 6, -10, 16, -2, -14, -29, -16, -52, 6, 20, 8, 2, 12, 5, 4, -20, -24, 2, 14, 14, -3, -27, -5, -51, 8, 16, 9, 10, 24, 8, -3, -29, -13, -4, 24, -8, -5, -34, 9, -54, -1, 25, 10, 10, 26, 5, 2, -4, -3, 6, 20, 4, -4, -42, 8, -43, 4, 21, 13, 8, 15, 4, 3, -26, 8, 1, 19, 0, -2, -10, -2, -58, 3, 22, 10, -4, 5, 0, -7, -19, 0, 3, 23, -1, -10, -29, -5, -72, -8, 27, 13, -16, 9, 6, -8, 0, -6, -5, 24, 9, 4, -24, 6, -42, -2, 20, -7, -6, 13, 2, 8, -16, 1, -6, 22, -2, 14, 1, 3, -64, 3, 14, 1, -11, 9, 10, -4, 2, 0, 3, 28, -3, -27, -6, 1, -55, -7, 18, 3, -6, 8, -11, -4, -10, 17, 5, 22, -1, -5, -16, 1, -42, -18, 25, 11, -10, -3, -15, -35, -2, 12, -6, 20, 1, 2, -7, 10, -39, -13, 33, 6, 4, 10, -9, -31, -20, -1, 1, 42, -1, 27, 8, -16, -19, 11, 33, -17, -6, 1, -32, -43, -22, 1, 0, 35, -2, 14, 14, 12, -8, -26, 8, 6, 16, -4, -27, -2, 21, -8, -2, 19, 
};
const TfArray<2, int> tensor_dimension10 = { 2, { 6,400 } };
const TfArray<1, float> quant10_scale = { 1, { 0.018214978277683258, } };
const TfArray<1, int> quant10_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int32_t tensor_data11[6] = { 207, -709, -31, 1278, -515, 526, };
const TfArray<1, int> tensor_dimension11 = { 1, { 6 } };
const TfArray<1, float> quant11_scale = { 1, { 0.0017716011498123407, } };
const TfArray<1, int> quant11_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,1,100,13 } };
const TfArray<1, float> quant12_scale = { 1, { 0.049091227352619171, } };
const TfArray<1, int> quant12_zero = { 1, { 6 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,1,100,32 } };
const TfArray<1, float> quant13_scale = { 1, { 0.072455435991287231, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<4, int> tensor_dimension14 = { 4, { 1,100,1,32 } };
const TfArray<1, float> quant14_scale = { 1, { 0.072455435991287231, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<4, int> tensor_dimension15 = { 4, { 1,50,1,32 } };
const TfArray<1, float> quant15_scale = { 1, { 0.072455435991287231, } };
const TfArray<1, int> quant15_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,50,32 } };
const TfArray<1, float> quant16_scale = { 1, { 0.072455435991287231, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,50,16 } };
const TfArray<1, float> quant17_scale = { 1, { 0.097260676324367523, } };
const TfArray<1, int> quant17_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,50,1,16 } };
const TfArray<1, float> quant18_scale = { 1, { 0.097260676324367523, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,25,1,16 } };
const TfArray<1, float> quant19_scale = { 1, { 0.097260676324367523, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<2, int> tensor_dimension20 = { 2, { 1,400 } };
const TfArray<1, float> quant20_scale = { 1, { 0.097260676324367523, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<2, int> tensor_dimension21 = { 2, { 1,6 } };
const TfArray<1, float> quant21_scale = { 1, { 0.76093184947967529, } };
const TfArray<1, int> quant21_zero = { 1, { 64 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<2, int> tensor_dimension22 = { 2, { 1,6 } };
const TfArray<1, float> quant22_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 12 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 12,6,7 } };
const TfArray<1, int> outputs1 = { 1, { 13 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 13,2 } };
const TfArray<1, int> outputs2 = { 1, { 14 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 14 } };
const TfArray<1, int> outputs3 = { 1, { 15 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 15,3 } };
const TfArray<1, int> outputs4 = { 1, { 16 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 16,8,9 } };
const TfArray<1, int> outputs5 = { 1, { 17 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 17,4 } };
const TfArray<1, int> outputs6 = { 1, { 18 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 18 } };
const TfArray<1, int> outputs7 = { 1, { 19 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 19,5 } };
const TfArray<1, int> outputs8 = { 1, { 20 } };
const TfLiteFullyConnectedParams opdata9 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs9 = { 3, { 20,10,11 } };
const TfArray<1, int> outputs9 = { 1, { 21 } };
const TfLiteSoftmaxParams opdata10 = { 1 };
const TfArray<1, int> inputs10 = { 1, { 21 } };
const TfArray<1, int> outputs10 = { 1, { 22 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1312, (TfLiteIntArray*)&tensor_dimension0, 1300, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 1248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 2400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 24, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension12, 1300, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3200, (TfLiteIntArray*)&tensor_dimension13, 3200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension14, 3200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3200, (TfLiteIntArray*)&tensor_dimension15, 1600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 1600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1600, (TfLiteIntArray*)&tensor_dimension17, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension18, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension19, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension21, 6, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension22, 6, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_SOFTMAX, },
};
static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 23;
  for (size_t i = 0; i < 23; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else {
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 11; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 11; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  22, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for (size_t i = 0; i < 11; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
