/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 12.10.2022 14:55:58

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 2096;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[23];
TfLiteEvalTensor tflEvalTensors[23];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[11];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,650 } };
const TfArray<1, float> quant0_scale = { 1, { 0.033307287842035294, } };
const TfArray<1, int> quant0_zero = { 1, { 10 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4] = { 1, 1, 50, 13, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data2[4] = { 1, 50, 1, 8, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data3[4] = { 1, 1, 25, 8, };
const TfArray<1, int> tensor_dimension3 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data4[4] = { 1, 25, 1, 16, };
const TfArray<1, int> tensor_dimension4 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data5[2] = { -1, 208, };
const TfArray<1, int> tensor_dimension5 = { 1, { 2 } };
const ALIGN(16) int8_t tensor_data6[8*1*3*13] = { 
  /* [0][0][][] */ -20,69,-127,-55,58,-59,21,-21,29,-53,9,3,24, 32,72,-96,-41,31,-4,-8,-35,18,-57,29,16,21, -6,96,-51,-42,-11,8,-36,-34,32,-34,21,-4,37, 
  /* [1][0][][] */ 71,127,-97,-25,-39,54,49,-66,7,69,-47,9,31, 109,25,-43,4,-85,50,33,-10,10,-20,-60,84,15, 42,34,-51,29,-117,27,1,-64,88,-30,16,37,21, 
  /* [2][0][][] */ 113,16,-63,45,-107,-88,81,-6,-16,17,-41,-3,32, 116,-34,-86,109,-58,-40,61,-40,33,-38,1,-24,27, 82,-20,-39,84,-127,-52,17,-110,58,53,-3,38,28, 
  /* [3][0][][] */ -28,101,-8,108,48,-47,74,30,-25,30,-16,-14,9, 106,127,-32,84,19,-57,49,-7,-21,33,-9,44,-8, 4,91,-14,52,25,-42,23,-6,-17,-13,0,-8,9, 
  /* [4][0][][] */ 30,127,43,12,37,-33,-42,80,-80,19,11,-48,-49, 45,123,23,-6,7,-13,-34,53,-60,42,-29,-43,-39, 39,59,87,8,82,-46,27,11,-45,-7,-12,6,3, 
  /* [5][0][][] */ 109,52,-16,-17,103,23,-11,6,1,-22,29,-34,3, 69,11,0,0,113,4,21,-5,11,-23,40,-14,-27, 66,-16,-24,-7,127,-27,18,3,24,-36,21,-21,-18, 
  /* [6][0][][] */ -98,3,-56,-49,-24,-63,17,-8,-67,63,-16,18,37, -15,67,-57,11,-41,-35,-43,46,-81,38,-14,-22,28, 15,6,18,6,-91,-23,4,89,-127,78,-10,-8,26, 
  /* [7][0][][] */ -55,-76,-59,17,78,-127,83,-45,-17,51,-47,22,19, 55,-28,-36,33,4,-75,52,-21,-21,41,-20,41,16, 4,-14,27,33,0,-113,49,-28,7,-32,53,-37,14, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 8,1,3,13 } };
const TfArray<8, float> quant6_scale = { 8, { 0.0056343697942793369, 0.0036546250339597464, 0.0037857023999094963, 0.0048216842114925385, 0.0040392619557678699, 0.0061280443333089352, 0.0047393422573804855, 0.0055055217817425728, } };
const TfArray<8, int> quant6_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int32_t tensor_data7[8] = { -4424, -666, -3376, -3159, -4143, -1773, -3172, -2604, };
const TfArray<1, int> tensor_dimension7 = { 1, { 8 } };
const TfArray<8, float> quant7_scale = { 8, { 0.00018766557332128286, 0.00012172565038781613, 0.00012609147233888507, 0.00016059722111094743, 0.00013453686551656574, 0.00020410853903740644, 0.00015785463619977236, 0.00018337399524170905, } };
const TfArray<8, int> quant7_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int8_t tensor_data8[16*1*3*8] = { 
  /* [0][0][][] */ 20,-21,-104,92,31,-119,99,-65, 60,-56,-94,2,26,-124,122,-38, 127,15,19,56,-9,-23,97,-30, 
  /* [1][0][][] */ -48,17,-86,-127,-92,-90,-75,-8, -23,-3,-41,13,-71,-65,14,7, 18,17,43,102,21,-21,19,72, 
  /* [2][0][][] */ -49,-18,-19,26,36,127,-58,9, -20,-48,-56,-33,-47,0,-52,11, -12,-47,-76,-84,-47,19,-7,3, 
  /* [3][0][][] */ 4,-16,-50,51,-56,35,14,53, 10,-27,30,127,16,74,19,30, -39,-63,27,39,-47,-36,104,8, 
  /* [4][0][][] */ -50,-24,54,-22,-11,0,-11,127, -114,-47,20,-14,-29,-3,10,71, -5,-43,-3,44,-65,5,-28,109, 
  /* [5][0][][] */ -18,-127,-85,-2,101,21,49,-8, -91,-119,-101,28,53,58,-49,-58, -81,-57,-35,62,40,41,-34,2, 
  /* [6][0][][] */ 127,9,64,30,2,-20,-29,47, 69,35,30,-37,-69,-17,-41,-101, 37,45,-4,-41,-39,-89,-71,-67, 
  /* [7][0][][] */ 11,-50,-25,-28,-42,72,91,6, -67,-82,-66,-8,39,-8,70,-59, -80,-127,-98,8,46,23,8,-44, 
  /* [8][0][][] */ -17,2,9,-72,-95,-18,-25,127, 22,-38,-27,-11,-62,-57,10,26, -36,-76,-43,-86,-75,-100,10,74, 
  /* [9][0][][] */ -17,17,34,-119,-31,-21,-43,-71, -27,127,66,-81,-71,-32,51,-52, -87,33,52,-34,-40,-110,53,-62, 
  /* [10][0][][] */ -38,16,-6,-71,-21,-87,28,-80, -15,12,1,4,38,-86,57,-85, -21,14,28,9,12,-56,127,-63, 
  /* [11][0][][] */ 15,7,71,65,-22,-93,32,-9, -23,33,93,-16,-38,-112,-7,15, 6,10,-35,81,-9,-127,41,-10, 
  /* [12][0][][] */ 127,-73,-105,-13,32,31,-10,-50, -3,-66,-19,-18,17,-38,13,26, -1,-21,15,25,43,31,-10,35, 
  /* [13][0][][] */ -84,7,-53,31,3,-90,-12,-127, -94,12,-27,15,76,-32,-35,-83, -32,3,-44,74,41,-17,62,-40, 
  /* [14][0][][] */ -13,28,-6,-50,-27,65,-37,-81, 35,28,-21,-30,1,44,-12,-41, -10,46,19,-30,-31,127,6,-24, 
  /* [15][0][][] */ 127,-2,-83,-30,3,5,-36,-85, 30,12,-76,-15,15,81,-7,-75, 115,-7,-64,-26,-25,61,-15,-27, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 16,1,3,8 } };
const TfArray<16, float> quant8_scale = { 16, { 0.0028599402867257595, 0.0047851330600678921, 0.0067494083195924759, 0.0032307817600667477, 0.0037493614945560694, 0.0046217255294322968, 0.0037770217750221491, 0.0052998852916061878, 0.0046421517618000507, 0.0045571592636406422, 0.0055423802696168423, 0.0050017801113426685, 0.0052778692916035652, 0.0051616816781461239, 0.0050927917473018169, 0.0055877272970974445, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int32_t tensor_data9[16] = { -3150, -846, 91, -5795, -3047, 39, -2599, -574, -931, 330, -772, -3000, -1276, 2174, -2071, -1456, };
const TfArray<1, int> tensor_dimension9 = { 1, { 16 } };
const TfArray<16, float> quant9_scale = { 16, { 0.00010886516247410327, 0.00018214866577181965, 0.00025691985501907766, 0.00012298145156819373, 0.00014272145926952362, 0.00017592846415936947, 0.0001437743630958721, 0.00020174297969788313, 0.00017670600209385157, 0.00017347071843687445, 0.00021097368153277785, 0.00019039545441046357, 0.00020090493489988148, 0.00019648218585643917, 0.00019385985797271132, 0.00021269984426908195, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int8_t tensor_data10[8*208] = { 
  -13, 21, 25, -1, -5, -18, -9, -27, -18, -21, -52, -10, -2, -28, -12, 22, 23, 34, -23, -8, -10, -40, 30, -24, 3, -31, 20, -1, -18, -34, -45, 4, 0, 51, -39, 6, -6, -27, 23, 6, 7, 27, 10, 20, 9, -25, -23, -28, -40, 40, 23, -6, 13, 6, -11, 13, 13, 28, 3, 22, 9, -12, 14, 13, -32, -49, 28, -41, -19, 15, 17, 28, -3, -35, -60, -27, 0, -15, 15, 21, -40, 9, 7, -16, -54, 20, -13, -12, -55, -17, -35, 7, 6, -5, 14, 8, 21, 22, 37, 22, 11, 6, -14, -18, -48, -16, -10, 31, 25, -11, 10, -9, 7, 18, -30, 27, 3, -37, 17, -18, -1, -5, -14, 44, -8, -12, -43, -34, 31, 19, -85, 23, 10, 16, 4, -2, -6, -11, -8, 33, 1, 1, -18, -22, 7, 10, -39, 23, 13, -12, 39, 14, -13, 2, -39, 31, -22, -26, -18, -2, -39, 11, -25, 9, 11, -17, 23, -25, -9, 18, -25, 32, -39, -49, -3, -10, -13, 13, -102, 16, 21, -59, 8, -25, 0, 15, -11, 32, -7, -37, -26, -47, 18, -10, -16, 2, 0, -74, -12, 8, 5, 14, -22, 15, -4, -49, -25, -27, 
  -32, 6, 7, -11, 4, 9, -2, -3, -18, 29, -4, -5, -1, 6, 19, -39, -41, -14, -10, -13, 5, -10, -25, -8, 15, 17, -28, -14, -29, -46, 20, -14, 16, 2, 8, -30, 10, -8, 38, -7, 13, 2, -49, -21, 6, -41, 28, 37, 11, -24, -22, 18, 5, -3, 26, 4, 18, -5, -31, -16, 14, -44, 37, 42, 17, -17, -15, 17, 3, -10, 2, 14, 19, -13, -12, -15, 22, -48, 37, 43, -1, -18, -28, 16, 27, -2, 17, 10, 27, 20, -3, -4, 16, -37, 18, 25, 4, -31, -15, 22, 10, 3, 12, 5, -11, 32, -8, -7, 20, -44, 15, 14, -15, -40, -54, 12, 5, 7, 11, 15, -36, 23, -11, 0, 28, -31, 29, 23, -10, -42, -22, -2, 2, 16, 17, 34, -32, 15, -4, -8, 15, -5, 14, 29, -17, -19, 5, 13, 4, 25, 14, -5, -31, 13, -1, -3, 42, 1, -13, 8, -36, -2, -4, -19, 6, 19, -6, 10, -9, 9, 8, -3, 10, 13, -6, -47, -68, -12, 1, 2, 0, 18, -19, -11, -9, 27, -19, -10, -6, 23, 4, -44, -61, 34, -5, -10, 13, 32, -14, -24, -1, -12, -28, 10, 1, 59, -42, -27, 
  10, -16, -45, 5, -23, 30, -27, 48, 23, -32, 5, -24, 10, 29, -28, -2, 0, -26, -16, 19, -7, 33, -46, 36, 16, -71, -21, -25, 36, 8, 26, 24, 0, -62, 20, 27, 4, 24, -36, 12, 3, -41, -33, -11, 24, 12, 26, 29, -4, -8, 15, 10, 0, 3, -47, 9, -21, -48, -3, -40, 6, -18, 17, 11, 17, 16, -3, 32, 13, 4, -17, -28, -21, -23, -9, 12, -3, -6, 15, 21, 4, -3, 3, 21, 14, -1, -10, -10, -4, -24, -19, 7, -4, -39, 16, -14, -6, 41, 6, 31, 41, -20, -6, -30, 0, -21, -60, 17, -11, -13, -20, -18, -12, 2, 7, 21, -9, 25, 0, -12, -25, 5, -43, 9, -34, -51, -14, -1, -1, 6, -22, -16, -25, -33, 1, -41, -25, 7, -20, 18, -24, -68, 3, 6, -11, 7, -11, -17, -12, -2, 33, -17, 4, 13, -21, 20, -3, -102, -10, -9, -1, 9, -71, -11, -29, -60, 42, -59, -23, 14, -23, 22, 1, -127, 3, -20, 4, 12, -53, -12, -12, -24, 28, 10, -10, 19, -11, 24, 19, -50, 13, -6, 4, -15, -48, 0, -19, 13, 30, 0, 7, 12, 0, 21, -6, -81, 24, 3, 
  -8, 10, 0, 3, 20, -2, 21, 56, 22, -7, 29, 9, 44, -27, -43, -6, -20, -22, -50, -18, 18, 35, -10, 31, 32, -48, -16, -16, 26, 20, -69, 15, -7, -26, -26, -1, 8, 32, -12, 7, 25, -71, -30, -46, 39, -1, -54, 7, -11, -16, -8, -21, -32, 23, 13, 6, -3, 47, 0, -22, 11, 8, -23, -17, 2, 12, -36, -8, -22, 11, -15, -41, -59, 26, 9, 8, -29, 15, -5, -33, -30, -30, 16, -5, 10, -18, -13, -53, 22, 31, -10, 4, -36, -30, 5, -17, -41, -14, 31, -1, 14, -48, 12, -11, 40, 27, 3, -7, -29, -50, 0, -26, -61, -17, 30, -7, 29, -32, -26, -16, 32, -9, -2, -22, -44, -69, 6, -13, 8, 18, 52, 1, 7, -47, -4, -8, 38, -2, 31, -14, -43, -7, -24, -48, 20, 18, 4, 16, 11, -24, -28, 14, -8, 15, 29, 5, -48, 9, -9, -31, 15, 10, 41, 24, -11, -12, -20, -2, 9, 7, 29, 5, -37, -1, 11, -27, 19, 8, 10, 14, 5, -15, -32, -2, 9, 0, 22, 15, -50, 14, 20, -3, -20, -16, 23, 38, -6, -12, -14, -44, 20, -32, -22, -8, 13, -21, 12, -3, 
  28, 23, -34, -5, 16, -71, -15, -26, 13, -15, -19, 27, 21, -55, 1, 24, -6, 6, -31, 4, 4, -46, -19, -23, 16, -35, -12, 13, 2, -73, -19, -2, -20, 36, -16, -2, 27, -35, 1, -15, 37, -20, -11, 23, 11, -15, -44, -52, -19, 21, -42, -8, 19, -35, -7, -27, 22, -32, -4, 26, 5, -26, -75, -24, 16, 20, -51, -5, -3, -21, 3, -15, 26, -23, 11, 2, -10, 12, -39, 29, 10, 18, -25, -8, -6, -18, 29, -32, 37, -43, 28, -1, 13, 12, -19, 24, 9, -3, -40, -6, -4, -25, 15, 4, -7, -51, 23, -25, -10, 5, 6, 11, 2, -20, -46, -9, 23, -10, 13, -28, 23, -54, -25, -22, 3, 6, 15, 22, 9, -11, -22, 0, 28, 2, 12, -35, 37, -43, -15, -20, 17, -26, 16, 40, -13, -4, -43, -7, 41, -17, 27, -36, 70, -30, -84, -3, 35, -81, 6, 43, -25, 16, -41, 14, 13, -32, 15, -35, 32, -30, -58, -4, 27, -87, 17, 36, 6, -5, -34, 2, 14, -16, 26, -1, 24, -31, -31, 9, 26, -80, 3, 26, -28, 7, -31, 15, 16, -45, -1, -9, -1, -30, -26, 13, 9, -76, 16, 45, 
  -32, -13, 17, -38, 0, -9, -5, -7, -7, 15, 14, -10, -8, -30, 33, 2, -16, -18, 35, -22, 7, 10, -12, 2, 1, 40, 32, 0, -11, -5, 35, -12, 10, -38, 48, -23, 3, 5, -17, -4, 2, 42, 30, 2, -10, 15, 8, -5, 8, -20, 22, -8, 9, -2, -33, 4, 8, 23, 32, 8, -23, 1, 6, -12, 9, -2, -37, -14, -18, -6, 4, 1, 4, 30, 32, 34, -25, 8, 7, -43, 15, -28, -94, -26, -30, -4, 3, -1, 1, 26, 32, 19, -21, 23, -4, 29, 28, -30, -46, -14, -36, 11, -8, 21, -18, 7, 12, 10, -7, 21, 4, 14, 16, -21, -6, 17, -32, 9, -16, -10, -8, -1, -11, 4, -2, 5, 8, 35, 5, -10, 11, 5, -10, 10, 1, 8, -33, -15, 12, -26, 19, -3, 14, 41, 21, -27, 22, 5, -18, 28, -17, 37, -27, -22, 4, -28, 19, -2, 0, 19, 11, -29, 14, 6, -29, 11, 4, 44, -7, -39, -21, -50, 19, -7, 11, 43, -18, 2, 14, -19, -3, 22, -1, 15, -10, -37, 2, -43, 14, 12, 7, 27, 18, 27, -3, -6, -21, 18, -42, 27, -3, -39, 25, -36, -8, 1, -11, -8, 
  -18, -3, 8, -18, -24, -33, -29, -2, -49, -16, 19, 3, -40, 8, 8, 4, -7, 17, -1, 2, -44, 4, -22, 14, -41, 2, 31, -3, -20, 11, 26, 8, 5, 22, 28, 15, -40, 14, -9, 11, -54, -9, 16, 4, -9, -10, 26, 19, 12, 22, 20, 25, -16, 17, -44, 14, -25, -13, 26, 16, 18, 7, 4, 0, 26, 16, 24, 25, -8, 14, -49, 28, -21, -37, 30, -6, -5, 15, -30, 2, 0, 1, 29, 1, -1, 27, -23, 29, -39, -35, 11, -19, 19, 14, -21, -16, -5, -2, 27, 16, 12, 22, -17, 32, -28, 21, 12, -15, 21, 16, -27, -32, 8, -2, 45, 2, -12, 29, -15, 27, -29, 20, 42, -1, -10, 22, -19, -25, 20, -6, 36, -13, -39, 13, -50, 26, -33, 10, 46, 6, -47, 22, 3, -37, 12, -5, 28, -7, -56, -23, -20, -1, -33, 14, 31, -20, -54, -6, 8, -45, 14, -7, 24, -15, -53, -14, -20, 13, -25, -15, 42, -8, -44, 22, 7, -7, 10, -29, 5, -28, -25, -17, -15, -11, -22, -14, 2, -20, -46, 3, -4, 6, -3, 2, 16, -45, -35, -42, 20, -6, -15, -4, 23, -3, -7, -41, -2, -1, 
  24, 3, 25, 35, 33, 27, 29, -20, 3, 4, 26, 2, 5, 37, -3, -21, 5, 10, 9, 3, 5, -18, 21, -37, 8, 63, 5, 16, -4, 20, 2, -47, 5, 5, 8, 12, 15, -12, 37, -33, -2, 54, -2, 17, -20, -1, -18, -56, -13, -8, 5, 5, 12, -29, 35, -30, 9, 17, -12, 13, -20, -1, -27, -35, 3, 25, -11, -12, 13, -21, 4, -27, 22, 0, -10, -5, -8, 11, -55, -31, 5, 40, -7, 2, 15, -3, 24, -20, 17, 11, -3, -7, -21, 16, -54, -23, -6, 27, -3, -3, 21, 4, 0, -17, 24, 4, -9, -14, -20, 38, -43, -64, -16, 58, 4, 1, 21, 4, -30, -9, 24, -19, -4, -18, -10, 22, -47, -42, -13, 40, -12, 7, 16, 10, -5, -2, 23, -29, 1, -5, -16, 14, -32, -35, -5, 27, 6, 6, 19, 10, -14, 15, 32, -25, -9, -6, 15, 27, -45, -48, 13, 3, 4, 27, 21, 15, -21, 12, 16, -25, 15, -16, 20, 17, -19, -8, 36, 23, 12, 28, 31, 23, 13, -4, -9, 10, 24, -9, 19, 39, -9, -23, 19, 17, 12, 46, 8, 28, 16, -12, 8, 20, 9, -7, 11, 50, 8, -17, 
};
const TfArray<2, int> tensor_dimension10 = { 2, { 8,208 } };
const TfArray<1, float> quant10_scale = { 1, { 0.0084327021613717079, } };
const TfArray<1, int> quant10_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int32_t tensor_data11[8] = { 67, -95, 35, 185, 142, -185, -375, 198, };
const TfArray<1, int> tensor_dimension11 = { 1, { 8 } };
const TfArray<1, float> quant11_scale = { 1, { 0.00042094339733012021, } };
const TfArray<1, int> quant11_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,1,50,13 } };
const TfArray<1, float> quant12_scale = { 1, { 0.033307287842035294, } };
const TfArray<1, int> quant12_zero = { 1, { 10 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,1,50,8 } };
const TfArray<1, float> quant13_scale = { 1, { 0.038065537810325623, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<4, int> tensor_dimension14 = { 4, { 1,50,1,8 } };
const TfArray<1, float> quant14_scale = { 1, { 0.038065537810325623, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<4, int> tensor_dimension15 = { 4, { 1,25,1,8 } };
const TfArray<1, float> quant15_scale = { 1, { 0.038065537810325623, } };
const TfArray<1, int> quant15_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,25,8 } };
const TfArray<1, float> quant16_scale = { 1, { 0.038065537810325623, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,25,16 } };
const TfArray<1, float> quant17_scale = { 1, { 0.049917973577976227, } };
const TfArray<1, int> quant17_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,25,1,16 } };
const TfArray<1, float> quant18_scale = { 1, { 0.049917973577976227, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,13,1,16 } };
const TfArray<1, float> quant19_scale = { 1, { 0.049917973577976227, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<2, int> tensor_dimension20 = { 2, { 1,208 } };
const TfArray<1, float> quant20_scale = { 1, { 0.049917973577976227, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<2, int> tensor_dimension21 = { 2, { 1,8 } };
const TfArray<1, float> quant21_scale = { 1, { 0.15451017022132874, } };
const TfArray<1, int> quant21_zero = { 1, { 14 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<2, int> tensor_dimension22 = { 2, { 1,8 } };
const TfArray<1, float> quant22_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 12 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 12,6,7 } };
const TfArray<1, int> outputs1 = { 1, { 13 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 13,2 } };
const TfArray<1, int> outputs2 = { 1, { 14 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 14 } };
const TfArray<1, int> outputs3 = { 1, { 15 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 15,3 } };
const TfArray<1, int> outputs4 = { 1, { 16 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 16,8,9 } };
const TfArray<1, int> outputs5 = { 1, { 17 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 17,4 } };
const TfArray<1, int> outputs6 = { 1, { 18 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 18 } };
const TfArray<1, int> outputs7 = { 1, { 19 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 19,5 } };
const TfArray<1, int> outputs8 = { 1, { 20 } };
const TfLiteFullyConnectedParams opdata9 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs9 = { 3, { 20,10,11 } };
const TfArray<1, int> outputs9 = { 1, { 21 } };
const TfLiteSoftmaxParams opdata10 = { 1 };
const TfArray<1, int> inputs10 = { 1, { 21 } };
const TfArray<1, int> outputs10 = { 1, { 22 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 656, (TfLiteIntArray*)&tensor_dimension0, 650, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 312, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 1664, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension12, 650, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 656, (TfLiteIntArray*)&tensor_dimension13, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension14, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension15, 200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension17, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension18, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension19, 208, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 208, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 208, (TfLiteIntArray*)&tensor_dimension21, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension22, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_SOFTMAX, },
};
static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 23;
  for (size_t i = 0; i < 23; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else {
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 11; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 11; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  22, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for (size_t i = 0; i < 11; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
